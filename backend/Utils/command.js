const { exec } = require('child_process');
const nmap2Json = require('./nmap2Json');
const xml2Json = require('./xml2Json');
const readJson = require('./jsonReader');
const joomla2Json = require('./joomla2Json');
const fs = require('fs');

const execCommand = (command, tool) => { // remove previous output file before run command
  return new Promise((resolve, reject) => {
    exec(command, (err, stdout, stderr) => {
      console.log(tool);
      if (err) {
        console.error("Exec error: ", err);
        reject("Command failed: " + command);
        return;
      }

      // the *entire* stdout and stderr (buffered)
      // console.log(`stdout: ${stdout}`);
      // console.log(`stderr: ${stderr}`);
      if (stderr) {
        console.log(stderr);
        reject(stderr);
        return;
      }
      if (stdout) { // the command finished successfully
        console.log('Command finished successfully: ' + tool);
        if (tool === 'nmap') {
          nmap2Json.nmap2Json()
            .then((json) => {
              console.log('Finshed Convertion nmap.');
              resolve(json);
            })
            .catch((err) => {
              console.log(err);
            });
        } else if (tool === 'whois') {
          xml2Json.xml2Json()
            .then((json) => {
              console.log('Finshed Convertion whois.');
              resolve(json)
            })
            .catch((err) => {
              console.log(err);
            });
        } else if (tool === 'whatweb') {
          let rawData = fs.readFileSync('outputs/whatwebOutput');
          let json = JSON.parse(rawData);
          execCommand('rm -f outputs/whatwebOutput', '');
          console.log('Finshed Convertion whatweb.');     
          resolve(json);
        } else if (tool === 'wapiti' || tool === 'sqli' || tool === 'xss') {
          let rawData = fs.readFileSync('outputs/wapitiOutput');
          let json = JSON.parse(rawData);
          console.log('Finshed Convertion wapiti.');     
          resolve(json);
        } else if (tool === 'wpscan') {
          let rawData = fs.readFileSync('outputs/wpscanOutput');
          let json = JSON.parse(rawData);
          console.log('Finshed Convertion wpscan.');     
          resolve(json);
        } else if (tool === 'joomscan') {
          joomla2Json.joomla2Json()
            .then((json) => {
              console.log('Finished Convertion joomscan.');
              resolve(json);
            })
            .catch((err) => {
              console.log(err);
            });
        } else if (tool === 'redirect') {
          resolve(stdout);
        }
      }
    });
  })
};

module.exports = {
  execCommand: async (command, tool) => {
    return await execCommand(command, tool);
  }
};
