var fs = require('fs');

function convert2Json() {

    try {
        var array = fs.readFileSync('outputs/joomscanOutput.txt').toString().split("\n");
        var json = new Object();
        var key = "Joomla Scan";
        json[key] = [];

        for (var i = 0; i < array.length; i++) {
            if (array[i].includes('FireWall Detector')) {
                key = "Firewall Detector";
                i++;
                json[key] = [];
                while (!array[i].includes('Detecting Joomla Version')) {
                    if (array[i] != '') {
                        json[key].push(array[i]);
                    }
                    i++;
                }
                i--;
            } else if (array[i].includes('Detecting Joomla Version')) {
                key = "Joomla Version";
                i++;
                if (array[i].startsWith('[++] ')) {
                    json[key] = array[i].split('[++] ')[1];
                } else {
                    json[key] = array[i];
                }
                while (!array[i].includes('Core Joomla Vulnerability')) {
                    i++;
                }
                i--;
            } else if (array[i].includes('Core Joomla Vulnerability')) {
                key = "Vulnerabilities";
                i++;
                json[key] = [];
                while (!array[i].includes('Checking apache info/status files')) {
                    if (array[i] != '') {
                        var vulnerability = new Object();
                        var key = "name"
                        if (array[i].startsWith('[++] ')) {
                            vulnerability[key] = array[i].split('[++] ')[1];
                        } else {
                            vulnerability[key] = array[i];
                        }
                        i++;
                        if (array[i].includes('CVE')) {
                            var key = "CVE"
                            vulnerability[key] = array[i].split('CVE : ')[1];
                            i++;
                        }
                        if (array[i].includes('EDB')) {
                            var key = "EDB"
                            vulnerability[key] = array[i].split('EDB : ')[1];
                            i++;
                        }
                        json['Vulnerabilities'].push(vulnerability);
                    }
                    i++;
                }
                i--;
            } else if (array[i].includes('Checking apache info/status files')) {
                key = "Apache";
                i++;
                json[key] = [];
                while (!array[i].includes('admin finder')) {
                    if (array[i] != '') {
                        json[key].push(array[i]);
                    }
                    i++;
                }
                i--;
            } else if (array[i].includes('admin finder')) {
                key = "Admin";
                i++;
                json[key] = [];
                while (!array[i].includes('Checking robots.txt')) {
                    if (array[i] != '') {
                        if (array[i].includes('Admin page : ')) {
                            json[key] = array[i].split('[++] Admin page : ')[1];
                        }
                    }
                    i++;
                }
                i--;
            } else if (array[i].includes('Checking robots.txt')) {
                key = "Robots";
                i++;
                json[key] = [];
                while (!array[i].includes('Finding common backup files name')) {
                    if (array[i] != '') {
                        var path = new Object();
                        var key = "path"
                        if (array[i].includes('path : ')) {
                            var key = "path"
                            path[key] = array[i].split('path : ')[1];
                            i++;
                        } else if (array[i].includes('http') || array[i].includes('https')) {
                            var key = "interestingPath"
                            path[key] = array[i];
                        }
                        json['Robots'].push(path);
                    }
                    i++;
                }
                i--;
            } else if (array[i].includes('Finding common backup files name')) {
                key = "Backup";
                i++;
                json[key] = [];
                while (!array[i].includes('Finding common log files name')) {
                    if (array[i] != '') {
                        json[key].push(array[i]);
                    }
                    i++;
                }
                i--;
            } else if (array[i].includes('Finding common log files name')) {
                key = "Config";
                i++;
                json[key] = [];
                while (!array[i].includes('Checking sensitive config.php.x file')) {
                    if (array[i] != '') {
                        json[key].push(array[i]);
                    }
                    i++;
                }
                i--;
            }
            else if (array[i].includes('Checking sensitive config.php.x file')) {
                key = "Config";
                i++;
                json[key] = [];
                while (!array[i].includes('Your Report')) {
                    if (array[i] != '') {
                        json[key].push(array[i].split(' : ')[1]);
                    }
                    i++;
                }
            }
        }
        return json;
    } catch (e) {
        return 'Error reading joomla to Json';
    }
}

const joomla2Json = () => {
    return new Promise((resolve, reject) => {
        const result = convert2Json();
        if (result === 'Error reading joomla to Json') {
            reject(result);
        } else {
            resolve(JSON.stringify(result));
        }
    })
}

module.exports = {
    joomla2Json: async () => {
        return await joomla2Json();
    }
};