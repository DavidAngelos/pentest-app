const express = require('express');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');

const execCommand = require('./Utils/command');
const ScanInfo = require('./models/scanInfo');

const app = express();

mongoose.connect("mongodb+srv://root:1flzthOeWOzINC0x@cluster0-vgqu3.mongodb.net/thesis-app?retryWrites=true&w=majority", { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => {
    console.log('Connected to db!');
  })
  .catch((err) => {
    console.log('Connection failed:' + err);
  });

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));

app.use((req, res, next) => {
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Headers", "Origin, X-Request-With, Content-Type, Accept");
  res.setHeader("Access-Control-Allow-Methods", "GET, POST, PATCH, DELETE, OPTIONS");
  next();
});

app.post("/api/scan/auto", (req, res, next) => { // change the :tool with auto
  // first is nmap scan
  execCommand.execCommand('nmap -oX outputs/nmapOutput.xml ' + req.body.insertedCommand, 'nmap')
    .then((commandOutput) => {
      const ports = commandOutput["host"]["ports"];
      const openPorts = [];
      ports.forEach(element => {
        if (element["state"]["state"] === "open") {
          openPorts.push(element["port"]["portid"]);
        }
      });
      console.log('Nmap scan found these ports as open: ' + openPorts);
      if (openPorts.includes('80')) {
        // continue with whatweb scan
        console.log(openPorts);
        execCommand.execCommand('/home/localhost/Documents/tools/WhatWeb/whatweb ' + req.body.insertedCommand + ' --log-json=outputs/whatwebOutput', 'whatweb')
          .then((commandOutput) => {
            let plugins = null;
            commandOutput.forEach(info => {
              if (info['plugins'] !== undefined) {
                if (info['plugins']['RedirectLocation'] === undefined) {
                  plugins = info['plugins'];
                }
              }
            });
            if (Object.keys(plugins).includes('WordPress')) {
              const wordpressVersion = plugins['WordPress']['version'];
              console.log('Wordpress found with version ' + wordpressVersion);
              // continue with wpscan scan
              execCommand.execCommand('wpscan --url ' + req.body.insertedCommand + ' -f json -o outputs/wpscanOutput; echo "finished"', 'wpscan')
                .then((commandOutput) => {
                  if (commandOutput['scan_aborted'] !== undefined) {
                    const redirectUrl = commandOutput['scan_aborted'].split(' ')[5].slice(0, -1);
                    console.log('The URL supplied redirects to: ' + redirectUrl + '. Starting new scan with this URL.');
                    // start new wpscan with new url
                    execCommand.execCommand('wpscan --url ' + redirectUrl + ' -f json -o outputs/wpscanOutput; echo "finished"', 'wpscan')
                      .then((commandOutput) => {
                          console.log(commandOutput);
                      });
                  }
                });
            }
          });
      }
    });
});

app.post("/api/scan/:tool", (req, res, next) => {
  /*
  if i want to create a new obj to store to db:
    const scanInfo = new ScanInfo({
      ip: req.body.ip,
      command: req.body.command
    });
    scanInfo.save();
   */
  const scanInfo = req.body;
  console.log(scanInfo);
  execCommand.execCommand(req.body.insertedCommand, req.params.tool)
    .then((commandOutput) => {
      res.status(200).json({
        message: 'Scan successful!',
        output: commandOutput
      });
    })
    .catch((reject) => {
      console.log(reject);
    });
});

// app.post("/api/scan/whois", (req, res, next) => {
//   /*
//   if i want to create a new obj to store to db:
//     const scanInfo = new ScanInfo({
//       ip: req.body.ip,
//       command: req.body.command
//     });
//     scanInfo.save();
//    */
//   const scanInfo = req.body;
//   console.log(scanInfo);
//   execCommand.execCommand(req.body.insertedCommand, 'whois')
//     .then((commandOutput) => {
//       res.status(200).json({
//         message: 'Scan successful!',
//         output: commandOutput
//       });
//     })
//     .catch((reject) => {
//       console.log(reject);
//     });
// });

// app.post("/api/scan/whatweb", (req, res, next) => {
//   /*
//   if i want to create a new obj to store to db:
//     const scanInfo = new ScanInfo({
//       ip: req.body.ip,
//       command: req.body.command
//     });
//     scanInfo.save();
//    */
//   const scanInfo = req.body;
//   console.log(scanInfo);
//   execCommand.execCommand(req.body.insertedCommand, 'whatweb')
//     .then((commandOutput) => {
//       res.status(200).json({
//         message: 'Scan successful!',
//         output: commandOutput
//       });
//     })
//     .catch((reject) => {
//       console.log(reject);
//     });
// });

app.get("/api/scan", (req, res, next) => {
  /*
  if i want to fetch data from db
    ScanInfo.find()
      .then(documents => {
        console.log(documents);
        res.status(200).json({
          message: 'Scan successful!',
          output: documents
        });
       });
   */
});

module.exports = app;
