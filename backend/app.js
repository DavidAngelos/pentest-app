const express = require('express');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');

const execCommand = require('./Utils/command');
const ScanInfo = require('./models/scanInfo');
const wordpress = require('./tools/wordpress');
const checkRedirection = require('./Utils/checkRedirection');
const cleanUrl = require('./Utils/cleanUrl');
const nmap = require('./tools/nmap');
const handler = require('./handler');

const app = express();

mongoose.connect("mongodb+srv://root:1flzthOeWOzINC0x@cluster0-vgqu3.mongodb.net/thesis-app?retryWrites=true&w=majority", { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => {
    console.log('Connected to db!');
  })
  .catch((err) => {
    console.log('Connection failed:' + err);
  });

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));

app.use((req, res, next) => {
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Headers", "Origin, X-Request-With, Content-Type, Accept");
  res.setHeader("Access-Control-Allow-Methods", "GET, POST, PATCH, DELETE, OPTIONS");
  next();
});

app.post("/api/scan/auto", (req, res, next) => { // change the :tool with auto
  // first we check if the site redirects
  console.log('IP to scan: ' + req.body.insertedIp);
  checkRedirection.redirects(req.body.insertedIp)
    .then((commandOutput) => {
      let urlToScan = req.body.insertedIp
      if (commandOutput['redirect']) {
        urlToScan = commandOutput['redirectUrl'];
      }

      urlToScan = cleanUrl.cleanUrl(urlToScan); // remove protocol, non ASCII chars and last '/' from url
      console.log('Clean URL ' + urlToScan);

      handler.chooseTool(urlToScan, req.params.tool, req.params.type)
        .then((commandOutput) => {
          res.status(200).json({
            message: 'Scan successful!',
            output: commandOutput
          });
        })
        .catch((reject) => {
          console.log(reject);
        });      // // first is nmap scan
      // nmap.defaultNmapScan(urlToScan)
      //   .then((commandOutput) => {
      //     const openPorts = commandOutput['openPorts'];
      //     if (openPorts.includes('80')) {
      //       // continue with whatweb scan
      //       console.log(openPorts);
      //       execCommand.execCommand('/home/localhost/Documents/tools/WhatWeb/whatweb ' + urlToScan + ' --log-json=outputs/whatwebOutput', 'whatweb')
      //         .then((commandOutput) => {
      //           let plugins = null;
      //           commandOutput.forEach(info => {
      //             if (info['plugins'] !== undefined) {
      //               if (info['plugins']['RedirectLocation'] === undefined) {
      //                 plugins = info['plugins'];
      //               }
      //             }
      //           });
      //           if (Object.keys(plugins).includes('WordPress')) {
      //             const wordpressVersion = plugins['WordPress']['version'];
      //             console.log('Wordpress found with version ' + wordpressVersion);
      //             // continue with wpscan scan
      //             wordpress.normalScan(urlToScan)
      //               .then((commandOutput) => {
      //                 console.log('Interesting URLs found: ');
      //                 commandOutput['interesting_findings'].forEach(finding => {
      //                   console.log(finding['url']);
      //                 });

      //                 // bruteforce
      //                 wordpress.bruteforceScan(urlToScan)
      //                   .then((commandOutput) => {
      //                     console.log(commandOutput);
      //                   });

      //               });
      //           }
      //         });

      //       // except for CMS scan, start sqli scan
      //       // execCommand.execCommand('wapiti -u ' + req.body.insertedIp + ' -m sql -f json -o outputs/wapitiOutput', 'wapiti')
      //       //   .then((commandOutput) => {
      //       //     console.log(commandOutput);
      //       //   });

      //     }
      //   });

    });
});

app.post("/api/scan/:tool", (req, res, next) => {
  /*
  if i want to create a new obj to store to db:
    const scanInfo = new ScanInfo({
      ip: req.body.ip,
      command: req.body.command
    });
    scanInfo.save();
   */
  const scanInfo = req.body;
  console.log(scanInfo);

  checkRedirection.redirects(req.body.insertedIp)
    .then((commandOutput) => {
      let urlToScan = req.body.insertedIp
      if (commandOutput['redirect']) {
        urlToScan = commandOutput['redirectUrl'];
      }

      urlToScan = cleanUrl.cleanUrl(urlToScan); // remove protocol, non ASCII chars and last '/' from url
      console.log('Clean URL ' + urlToScan);

      handler.chooseTool(urlToScan, req.params.tool, req.params.type)
        .then((commandOutput) => {
          res.status(200).json({
            message: 'Scan successful!',
            output: commandOutput
          });
        })
        .catch((reject) => {
          console.log(reject);
        });
    });
});

module.exports = app;
