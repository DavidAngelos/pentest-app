const nmap = require('./tools/nmap');
const whois = require('./tools/whois');
const whatweb = require('./tools/whatweb');
const pentest = require('./tools/auto');
const wapiti = require('./tools/wapiti');
const wordpress = require('./tools/wordpress');
const joomla = require('./tools/joomla');

const chooseTool = (url, tool, type) => {
    return new Promise((resolve, reject) => {
        switch (tool) {
            case "nmap":
                nmap.nmapTool(url, "common")
                    .then((nmapInfo) => resolve(nmapInfo))
                    .catch((err) => reject(err));
                break;
            case "whois":
                whois.whoisTool(url, "default")
                    .then((whoisInfo) => resolve(whoisInfo))
                    .catch((err) => reject(err));
                break;
            case "whatweb":
                whatweb.whatwebTool(url, "default")
                    .then((whatwebInfo) => resolve(whatwebInfo))
                    .catch((err) => reject(err));
                break;
            case "wapiti":
                wapiti.wapitiTool(url, "default")
                    .then((wapitiInfo) => resolve(wapitiInfo))
                    .catch((err) => reject(err));
                break;
            case "sqli":
                wapiti.wapitiTool(url, "sqli")
                    .then((wapitiInfo) => resolve(wapitiInfo))
                    .catch((err) => reject(err));
                break;
            case "xss":
                wapiti.wapitiTool(url, "xss")
                    .then((wapitiInfo) => resolve(wapitiInfo))
                    .catch((err) => reject(err));
                break;
            case "wpscan":
                wordpress.wordpressTool(url, "default")
                    .then((wordpressInfo) => resolve(wordpressInfo))
                    .catch((err) => reject(err));
                break;
            case "joomscan":
                joomla.joomlaTool(url, "default")
                    .then((joomlaInfo) => resolve(joomlaInfo))
                    .catch((err) => reject(err));
                break;
            case "auto":
                pentest.autoScanTool(url)
                    .then((autoScanInfo) => resolve(autoScanInfo))
                    .catch((err) => reject(err));
                break;
        }
    })
};

module.exports = {
    chooseTool: async (url, tool, type) => {
        return await chooseTool(url, tool, type);
    }
};
