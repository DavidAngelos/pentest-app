const nmap = require('./tools/nmap');
const whois = require('./tools/whois');
const whatweb = require('./tools/whatweb');
const pentest = require('./tools/auto');
const custom = require('./tools/custom');
const wapiti = require('./tools/wapiti');
const wordpress = require('./tools/wordpress');
const joomla = require('./tools/joomla');
const dnsrecon = require('./tools/dnsrecon');
const sublist3r = require('./tools/sublist3r');
const gobuster = require('./tools/gobuster');

const chooseTool = (url, tool, type, toolsSelected, proxy) => {
    return new Promise((resolve, reject) => {
        switch (tool) {
            case "nmap":
                nmap.nmapTool(url, 'common')
                    .then((nmapInfo) => {
                        resolve(nmapInfo);
                    })
                    .catch((err) => reject(err));
                break;
            case "whois":
                whois.whoisTool(url, type)
                    .then((whoisInfo) => resolve(whoisInfo))
                    .catch((err) => reject(err));
                break;
            case "whatweb":
                whatweb.whatwebTool(url, type, proxy)
                    .then((whatwebInfo) => resolve(whatwebInfo))
                    .catch((err) => reject(err));
                break;
            case "wapiti":
                wapiti.wapitiTool(url, type, proxy)
                    .then((wapitiInfo) => resolve(wapitiInfo))
                    .catch((err) => reject(err));
                break;
            case "sqli":
                wapiti.wapitiTool(url, 'sqli')
                    .then((wapitiInfo) => resolve(wapitiInfo))
                    .catch((err) => reject(err));
                break;
            case "xss":
                wapiti.wapitiTool(url, 'xss')
                    .then((wapitiInfo) => resolve(wapitiInfo))
                    .catch((err) => reject(err));
                break;
            case "wpscan":
                wordpress.wordpressTool(url, type, proxy)
                    .then((wordpressInfo) => resolve(wordpressInfo))
                    .catch((err) => reject(err));
                break;
            case "joomscan":
                joomla.joomlaTool(url, type, proxy)
                    .then((joomlaInfo) => resolve(joomlaInfo))
                    .catch((err) => reject(err));
                break;
            case "heartbleed":
                nmap.nmapTool(url, 'heartbleed')
                    .then((nmapInfo) => {
                        resolve(nmapInfo);
                    })
                    .catch((err) => reject(err));
                break;
            case "poodle":
                nmap.nmapTool(url, 'poodle')
                    .then((nmapInfo) => {
                        resolve(nmapInfo);
                    })
                    .catch((err) => reject(err));
                break;
            case "drown":
                nmap.nmapTool(url, 'drown')
                    .then((nmapInfo) => {
                        resolve(nmapInfo);
                    })
                    .catch((err) => reject(err));
                break;
            case "dnsrecon":
                dnsrecon.dnsreconTool(url, type)
                    .then((dnsreconInfo) => {
                        resolve(dnsreconInfo);
                    })
                    .catch((err) => reject(err));
                break;
            case "sublist3r":
                sublist3r.sublist3rTool(url, type)
                    .then((sublist3rInfo) => resolve(sublist3rInfo))
                    .catch((err) => reject(err));
                break;
            case "gobuster":
                gobuster.gobusterTool(url, type)
                    .then((gobusterInfo) => resolve(gobusterInfo))
                    .catch((err) => reject(err));
                break;
            case "auto":
                pentest.autoScanTool(url.proxy)
                    .then((autoScanInfo) => resolve(autoScanInfo))
                    .catch((err) => reject(err));
                break;
            case "custom":
                custom.customScanTool(url, toolsSelected, proxy)
                    .then((autoScanInfo) => resolve(autoScanInfo))
                    .catch((err) => reject(err));
                break;
        }
    })
};

module.exports = {
    chooseTool: async(url, tool, type, toolsSelected, proxy) => {
        return await chooseTool(url, tool, type, toolsSelected, proxy);
    }
};