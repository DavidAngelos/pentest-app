const nmap = require('./nmap');
const whois = require('./whois');
const whatweb = require('./whatweb');
const wapiti = require('./wapiti');
const wordpress = require('./wordpress');
const joomla = require('./joomla');
const sublist3r = require('./sublist3r');
const gobuster = require('./gobuster');

const autoScan = (url, proxy) => {
    return new Promise((resolve, reject) => {

        let output = {};
        let remainingTools = ['whatweb', 'wpscan_default', 'wpscan_bruteforce', 'joomscan_default', 'nmap_joomla', 'wapiti_sqli', 'wapiti_xss', 'nmap_vuln', 'theharvester', 'gobuster', 'sublist3r'];

        nmap.nmapTool(url, "common")
            .then((nmapOutput) => {

                output['nmap_vuln'] = nmapOutput;

                remainingTools.splice(remainingTools.indexOf('nmap_vuln'), 1);
                if (remainingTools.length == 0) {
                    resolve(output);
                }

                const openPorts = nmapOutput['openPorts'];
                const vulns = nmapOutput['vulnerabilities'];

                if (openPorts.includes('80')) {

                    // continue with whatweb scan
                    console.log(openPorts);

                    whatweb.whatwebTool(url, "default", proxy)
                        .then((whatwebOutput) => {

                            output['whatweb'] = whatwebOutput;

                            remainingTools.splice(remainingTools.indexOf('whatweb'), 1);
                            if (remainingTools.length == 0) {
                                resolve(output);
                            }

                            if (Object.keys(whatwebOutput).includes('WordPress')) {

                                const wordpressVersion = whatwebOutput['WordPress']['version'];
                                console.log('Wordpress found with version ' + wordpressVersion);

                                // continue with wpscan scan
                                wordpress.wordpressTool(url, "default", proxy)
                                    .then((wordpressOutput) => {

                                        output['wpscan_default'] = wordpressOutput;

                                        remainingTools.splice(remainingTools.indexOf('wpscan_default'), 1);
                                        remainingTools.splice(remainingTools.indexOf('joomscan_default'), 1);
                                        remainingTools.splice(remainingTools.indexOf('nmap_joomla'), 1);
                                        if (remainingTools.length == 0) {
                                            resolve(output);
                                        }

                                        console.log(wordpressOutput);
                                        console.log('Interesting URLs found: ');
                                        wordpressOutput['interesting_findings'].forEach(finding => {
                                            console.log(finding['url']);
                                        });

                                        // bruteforce
                                        wordpress.wordpressTool(url, "bruteforce", proxy)
                                            .then((wordpressOutput) => {

                                                output['wpscan_bruteforce'] = wordpressOutput;

                                                remainingTools.splice(remainingTools.indexOf('wpscan_bruteforce'), 1);
                                                if (remainingTools.length == 0) {
                                                    resolve(output);
                                                }

                                                console.log(wordpressOutput);
                                            })
                                            .catch((err) => reject(err));

                                    })
                                    .catch((err) => reject(err));

                            } else if (Object.keys(whatwebOutput).includes('Joomla')) {

                                const joomlaVersion = whatwebOutput['Joomla']['version'];
                                console.log('Joomla found with version ' + joomlaVersion);

                                // continue with joomscan scan
                                joomla.joomlaTool(url, "default", proxy)
                                    .then((joomlaOutput) => {

                                        output['joomscan_default'] = joomlaInfo;

                                        remainingTools.splice(remainingTools.indexOf('joomscan_default'), 1);
                                        remainingTools.splice(remainingTools.indexOf('wpscan_default'), 1);
                                        remainingTools.splice(remainingTools.indexOf('wpscan_bruteforce'), 1);

                                        if (remainingTools.length == 0) {
                                            resolve(output);
                                        }

                                        console.log(joomlaOutput);
                                        joomlaOutput['Robots'].forEach(finding => {
                                            console.log(finding['interestingPath']);
                                        });

                                        // bruteforce
                                        joomla.joomlaTool(url, "joomlaBrute")
                                            .then((nmapOutput) => {

                                                output['nmap_joomla'] = nmapOutput;

                                                remainingTools.splice(remainingTools.indexOf('nmap_joomla'), 1);
                                                if (remainingTools.length == 0) {
                                                    resolve(output);
                                                }

                                                console.log("Joomla bruteforce output: " + nmapOutput);
                                            })
                                            .catch(err => reject(err));
                                    })
                                    .catch((err) => reject(err));


                            }
                        })
                        .catch((err) => reject(err));

                    // SQLi scan
                    wapiti.wapitiTool(url, "sqli", proxy)
                        .then((wapitiInfo) => {

                            output['wapiti_sqli'] = wapitiInfo;

                            remainingTools.splice(remainingTools.indexOf('wapiti_sqli'), 1);
                            if (remainingTools.length == 0) {
                                resolve(output);
                            }

                            console.log("Wapiti sqli output: " + wapitiInfo);
                        })
                        .catch((err) => reject(err));

                    // XSS scan
                    wapiti.wapitiTool(url, "xss", proxy)
                        .then((wapitiInfo) => {

                            output['wapiti_xss'] = wapitiInfo;

                            remainingTools.splice(remainingTools.indexOf('wapiti_xss'), 1);
                            if (remainingTools.length == 0) {
                                resolve(output);
                            }

                            console.log("Wapiti xss output: " + wapitiInfo);
                        })
                        .catch((err) => reject(err));
                }
                // Nmap vuln scan
                // nmap.nmapTool(url, "common")
                //     .then((nmapOutput) => {

                //         output['nmap_vuln'] = nmapOutput;

                //         remainingTools.splice(remainingTools.indexOf('nmap_vuln'), 1);
                //         if (remainingTools.length == 0) {
                //             resolve(output);
                //         }

                //         console.log("Nmap common vuln output: " + nmapOutput);
                //     })
                //     .catch(err => reject(err));

                // OSINT info
                whois.whoisTool(url, "default")
                    .then((whoisInfo) => {

                        output['theharvester'] = whoisInfo;

                        remainingTools.splice(remainingTools.indexOf('theharvester'), 1);
                        if (remainingTools.length == 0) {
                            resolve(output);
                        }

                        console.log("Whois output: " + whoisInfo);
                    })
                    .catch((err) => reject(err));

                // URIs scan
                gobuster.gobusterTool(url, "default", proxy)
                    .then((gobusterInfo) => {

                        output['gobuster'] = gobusterInfo;

                        remainingTools.splice(remainingTools.indexOf('gobuster'), 1);
                        if (remainingTools.length == 0) {
                            resolve(output);
                        }

                        console.log("Gobuster output: " + gobusterInfo);
                    })
                    .catch((err) => reject(err));

                // Subdomains scan
                sublist3r.sublist3rTool(url, "default")
                    .then((sublist3rInfo) => {

                        output['sublist3r'] = sublist3rInfo;

                        remainingTools.splice(remainingTools.indexOf('gobuster'), 1);
                        if (remainingTools.length == 0) {
                            resolve(output);
                        }

                        console.log("Sublist3r output: " + sublist3rInfo);
                    })
                    .catch((err) => reject(err));
            })
            .catch((err) => reject(err));
    });
};

function autoScanTool(url, proxy) {
    return new Promise((resolve, reject) => {
        autoScan(url, proxy)
            .then((commandOutput) => {
                // TODO: Do sth
                resolve(commandOutput);
            })
            .catch((err) => {
                reject(err);
            });
    });
}

module.exports = {
    autoScanTool: async(url, proxy) => {
        return await autoScanTool(url, proxy);
    }
};