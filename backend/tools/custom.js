const nmap = require('./nmap');
const whatweb = require('./whatweb');
const wordpress = require('./wordpress');
const joomla = require('./joomla');
const whois = require('./whois');
const wapiti = require('./wapiti');
const gobuster = require('./gobuster');
const sublist3r = require('./sublist3r');

const customScan = (url, toolsSelected, proxy) => {
    return new Promise((resolve, reject) => {

        console.log('Tools selected: ' + toolsSelected);

        let count = 1;
        let output = {};

        if (toolsSelected.includes('nmap_default')) {
            nmap.nmapTool(url, "default")
                .then((nmapOutput) => {
                    output['nmap_default'] = nmapOutput;
                    count++;
                    if (count == toolsSelected.length) {
                        resolve(output);
                    }
                    console.log("Nmap default output: " + nmapOutput);
                })
                .catch(err => reject(err));
        }
        if (toolsSelected.includes('nmap_vuln')) {
            nmap.nmapTool(url, "common")
                .then((nmapOutput) => {
                    output['nmap_vuln'] = nmapOutput;
                    count++;
                    if (count == toolsSelected.length) {
                        resolve(output);
                    }
                    console.log("Nmap common vuln output: " + nmapOutput);
                })
                .catch(err => reject(err));
        }
        if (toolsSelected.includes('theharvester')) {
            whois.whoisTool(url, "default")
                .then((whoisInfo) => {
                    output['theharvester'] = whoisInfo;
                    count++;
                    if (count == toolsSelected.length) {
                        resolve(output);
                    }
                    console.log("Whois output: " + whoisInfo);
                })
                .catch((err) => reject(err));
        }
        if (toolsSelected.includes('whatweb')) {
            whatweb.whatwebTool(url, "default", proxy)
                .then((whatwebInfo) => {
                    output['whatweb'] = whatwebInfo;
                    count++;
                    if (count == toolsSelected.length) {
                        resolve(output);
                    }
                    console.log("Whatweb output: " + whatwebInfo);
                })
                .catch((err) => reject(err));
        }
        if (toolsSelected.includes('wapiti_sqli')) {
            wapiti.wapitiTool(url, "sqli", proxy)
                .then((wapitiInfo) => {
                    output['wapiti_sqli'] = wapitiInfo;
                    count++;
                    if (count == toolsSelected.length) {
                        resolve(output);
                    }
                    console.log("Wapiti sqli output: " + wapitiInfo);
                })
                .catch((err) => reject(err));
        }
        if (toolsSelected.includes('wapiti_xss')) {
            wapiti.wapitiTool(url, "xss", proxy)
                .then((wapitiInfo) => {
                    output['wapiti_xss'] = wapitiInfo;
                    count++;
                    if (count == toolsSelected.length) {
                        resolve(output);
                    }
                    console.log("Wapiti xss output: " + wapitiInfo);
                })
                .catch((err) => reject(err));
        }
        if (toolsSelected.includes('wpscan_default')) {
            wordpress.wordpressTool(url, "default", proxy)
                .then((wordpressOutput) => {
                    output['wpscan_default'] = wordpressOutput;
                    count++;
                    if (count == toolsSelected.length) {
                        resolve(output);
                    }
                    console.log("Wordpress default output: " + wordpressOutput);
                })
                .catch((err) => reject(err))
        }
        if (toolsSelected.includes('joomscan_default')) {
            joomla.joomlaTool(url, "default", proxy)
                .then((joomlaInfo) => {
                    output['joomscan_default'] = joomlaInfo;
                    count++;
                    if (count == toolsSelected.length) {
                        resolve(output);
                    }
                    console.log("Joomla default output: " + joomlaInfo);
                })
                .catch((err) => reject(err));
        }
        if (toolsSelected.includes('wpscan_bruteforce')) {
            wordpress.wordpressTool(url, "bruteforce", proxy)
                .then((wordpressOutput) => {
                    output['wpscan_bruteforce'] = wordpressOutput;
                    count++;
                    if (count == toolsSelected.length) {
                        resolve(output);
                    }
                    console.log("Wordpress default output: " + wordpressOutput);
                })
                .catch((err) => reject(err));
        }
        if (toolsSelected.includes('nmap_joomla')) {
            joomla.joomlaTool(url, "joomlaBrute")
                .then((nmapOutput) => {
                    output['nmap_joomla'] = nmapOutput;
                    count++;
                    if (count == toolsSelected.length) {
                        resolve(output);
                    }
                    console.log("Nmap joomla bruteforce output: " + nmapOutput);
                })
                .catch(err => reject(err));
        }
        if (toolsSelected.includes('gobuster')) {
            gobuster.gobusterTool(url, "default", proxy)
                .then((gobusterInfo) => {
                    output['gobuster'] = gobusterInfo;
                    count++;
                    if (count == toolsSelected.length) {
                        resolve(output);
                    }
                    console.log("Gobuster output: " + gobusterInfo);
                })
                .catch((err) => reject(err));
        }
        if (toolsSelected.includes('sublist3r')) {
            sublist3r.sublist3rTool(url, "default")
                .then((sublist3rInfo) => {
                    output['sublist3r'] = sublist3rInfo;
                    count++;
                    if (count == toolsSelected.length) {
                        resolve(output);
                    }
                    console.log("Sublist3r output: " + sublist3rInfo);
                })
                .catch((err) => reject(err));
        }

    });
};

function customScanTool(url, toolsSelected, proxy) {
    return new Promise((resolve, reject) => {
        customScan(url, toolsSelected, proxy)
            .then((commandOutput) => {
                // TODO: Do sth
                resolve(commandOutput);
            })
            .catch((err) => {
                reject(err);
            });
    });
}

module.exports = {
    customScanTool: async(url, toolsSelected, proxy = "") => {
        return await customScanTool(url, toolsSelected, proxy);
    }
};