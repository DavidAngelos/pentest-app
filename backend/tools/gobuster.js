const command = require('../Utils/command');
const fs = require('fs');
const config = require('../config/config');
const readline = require('readline');

const defaultScan = (url, proxy) => {
    return new Promise((resolve, reject) => {
        let command = "";
        if (proxy != "") {
            command = config.GOBUSTER + ' -u ' + url + ' -w ' + config.gobuster_wordlist + ' -s "200" -r -p ' + checkProxy(proxy) + ' | grep "Status: 200" | cut -d" " -f1 > outputs/gobuster.txt; echo "finished" ';
        } else {
            command = config.GOBUSTER + ' -u ' + url + ' -w ' + config.gobuster_wordlist + ' -s "200" -r | grep "Status: 200" | cut -d" " -f1 > outputs/gobuster.txt; echo "finished" ';
        }
        command.execCommand(command, 'gobuster')
            .then((commandOutput) => {
                resolve(commandOutput);
            })
            .catch((err) => {
                reject(err);
            });
    });
};

function checkProxy(proxy) {
    if (proxy.startsWith('http')) {
        return proxy;
    } else {
        return 'http://' + proxy;
    }
}

function toJson() {
    return new Promise((resolve, reject) => {
        const json = {};
        domains = []
        var lineReader = readline.createInterface({
            input: fs.createReadStream('outputs/gobuster.txt')
        });

        lineReader.on('line', function(line) {
            domains.push(line);
        });
        lineReader.on('close', function() {
            json['domains'] = domains;
            // command.execCommand('rm -f outputs/gobuster.txt', 'clean');
            console.log('Finshed Convertion gobuster.');
            resolve(json);
        });
    });
}

function gobusterTool(url, type, proxy) {
    return new Promise((resolve, reject) => {
        switch (type) {
            case "default":
                gobusterTool_default(url, proxy)
                    .then(commandOutput => resolve(commandOutput))
                    .catch(err => reject(err));
                break;
        }
    });
}

function gobusterTool_default(domain, proxy) {
    return new Promise((resolve, reject) => {
        toJson()
            .then((json) => {
                resolve(json)
            })
            .catch((err) => {
                reject(err);
            });
        // COMMENTED FOR TESTING PURPOSES
        // defaultScan(domain, proxy)
        //     .then((commandOutput) => {
        //         if (commandOutput !== 'success') {
        //             reject(commandOutput);
        //         }
        //         toJson()
        //             .then((json) => {
        //                 resolve(json)
        //             })
        //             .catch((err) => {
        //                 reject(err);
        //             });
        //     })
        //     .catch((err) => {
        //         reject(err);
        //     });
    });
}



module.exports = {
    gobusterTool: async(domain, type, proxy = "") => {
        return await gobusterTool(domain, type, proxy);
    }
};