const command = require('../Utils/command');
const fs = require('fs');
const config = require('../config/config');
const readline = require('readline');

const defaultScan = (url) => {
    return new Promise((resolve, reject) => {
        console.log(config.GOBUSTER + ' -u ' + url + ' -w ' + config.gobuster_wordlist + ' -s "200" -r | grep "Status: 200" | cut -d" " -f1 > outputs/gobuster.txt ');
        // gobuster -u http://wordy -w /home/localhost/Documents/tools/wordlists/common.txt -s "200" -r | grep "Status: 200" | cut -d" " -f1 > output.txt
        command.execCommand(config.GOBUSTER + ' -u ' + url + ' -w ' + config.gobuster_wordlist + ' -s "200" -r | grep "Status: 200" | cut -d" " -f1; echo "finished" ', 'gobuster')
            .then((commandOutput) => {
                resolve(commandOutput);
            })
            .catch((err) => {
                reject(err);
            });
    });
};

function toJson() {
    return new Promise((resolve, reject) => {
        const json = {};
        domains = []
        var lineReader = readline.createInterface({
            input: fs.createReadStream('outputs/gobuster.txt')
        });

        lineReader.on('line', function(line) {
            domains.push(line);
        });
        lineReader.on('close', function() {
            json['domains'] = domains;
            command.execCommand('rm -f outputs/gobuster.txt', 'clean');
            console.log('Finshed Convertion gobuster.');
            resolve(json);
        });
    });
}

function getInfo(json) {
    return new Promise((resolve, reject) => {
        let plugins = null;
        json.forEach(info => {
            if (info['plugins'] !== undefined) {
                if (info['plugins']['RedirectLocation'] === undefined) {
                    plugins = info['plugins'];
                }
            }
        });
        resolve(plugins);
    });
}

function gobusterTool(url, type) {
    return new Promise((resolve, reject) => {
        switch (type) {
            case "default":
                gobusterTool_default(url)
                    .then(commandOutput => resolve(commandOutput))
                    .catch(err => reject(err));
                break;
        }
    });
}

function gobusterTool_default(domain) {
    return new Promise((resolve, reject) => {
        defaultScan(domain)
            .then((commandOutput) => {
                if (commandOutput !== 'success') {
                    reject(commandOutput);
                }
                toJson()
                    .then((json) => {
                        console.log(json);
                        // getInfo(json)
                        //     .then((whatwebInfo) => resolve(whatwebInfo))
                        //     .catch((err) => err);
                        resolve(json)
                    })
                    .catch((err) => {
                        reject(err);
                    });
            })
            .catch((err) => {
                reject(err);
            });
    });
}



module.exports = {
    gobusterTool: async(domain, type) => {
        return await gobusterTool(domain, type);
    }
};