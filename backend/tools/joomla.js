const command = require('../Utils/command');
const joomla2Json = require('../Utils/joomla2Json');
const config = require('../config/config');
const nmap2Json = require('../Utils/nmap2Json');
const cleanUrl = require('../Utils/cleanUrl');

const normalScan = (url, proxy) => {
    return new Promise((resolve, reject) => {
        let commandToExec = "";
        if (proxy != "") {
            commandToExec = config.JOOMSCAN + ' --url ' + url + ' --proxy ' + checkProxy(proxy) + ' -ec > /home/localhost/Documents/pentest-app/outputs/joomscanOutput; echo "finished"';
        } else {
            commandToExec = config.JOOMSCAN + ' --url ' + url + ' -ec > /home/localhost/Documents/pentest-app/outputs/joomscanOutput; echo "finished"';
        }
        console.log(config.JOOMSCAN + ' --url ' + url + ' -ec > outputs/joomscanOutput; echo "finished"');
        command.execCommand(commandToExec, 'joomscan', '/home/localhost/Documents/tools/joomscan')
            .then((commandOutput) => {
                console.log(commandOutput)
                resolve(commandOutput);
            })
            .catch((err) => {
                reject(err);
            });
    });
}

const joomlaBrute = (url) => {
    return new Promise((resolve, reject) => {
        command.execCommand(config.NMAP + ' -oX outputs/nmapOutput_joomla.xml -sV --script http-joomla-brute ' + url, 'nmap')
            .then((commandOutput) => {
                resolve(commandOutput);
            })
            .catch((err) => {
                reject(err);
            });
    });
}

function checkProxy(proxy) {
    if (proxy.startsWith('http')) {
        return proxy;
    } else {
        return 'http://' + proxy;
    }
}

function toJson(file, type) {
    return new Promise((resolve, reject) => {
        if (type == "joomlaBrute") {
            nmap2Json.nmap2Json(file)
                .then((json) => {
                    console.log('Finshed Convertion nmap.');
                    resolve(json);
                })
                .catch((err) => {
                    reject(err);
                });
        } else {
            joomla2Json.joomla2Json()
                .then((json) => {
                    console.log('Finished Convertion joomscan.');
                    resolve(JSON.parse(json));
                })
                .catch((err) => {
                    reject(err);
                });
        }
    });
}

function getInfo(json, type) {
    return new Promise((resolve, reject) => {
        switch (type) {
            case "joomlaBrute":
		let ports = [];
		if (json.host !== undefined) {
                	ports = json.host.ports;
		}
                let userCreds = [];
                ports.forEach(element => {
                    if (element.script !== 'undefined') {
                        scriptString = jsonEscape(JSON.stringify(element.script));
                        scriptObj = JSON.parse(scriptString);
                        console.log(scriptObj);
                        scriptObj["http-joomla-brute"].split("|").forEach(cred => {
                            if (cred.includes("Valid")) {
                                console.log(cred);
                                userCreds.push(cred);
                            }
                        });
                    }
                });
                console.log('Joomla bruteforce scan found these users cred: ' + userCreds);
                resolve({ 'userCreds': userCreds });
                break;
        }
    });
}


function joomlaTool(url, type, proxy) {
    return new Promise((resolve, reject) => {
        switch (type) {
            case "default":
                joomla_normal(url, proxy)
                    .then(commandOutput => resolve(commandOutput))
                    .catch(err => reject(err));
                break;
            case "joomlaBrute":
		    url = cleanUrl.cleanUrl(url); // remove protocol, non ASCII chars and last '/' from url

		    if (url.includes('/')) {
			url = url.split('/')[0];
		    }
                nmapTool_joomlaBrute(url)
                    .then(commandOutput => resolve(commandOutput))
                    .catch(err => reject(err));
                break;
        }
    });
}

function joomla_normal(url, proxy) {
    return new Promise((resolve, reject) => {
        io.emit('progress', 'Detecting Joomla CMS vulnerabilities and analysis..');
        // toJson("", "")
        //     .then((json) => {
        //         resolve(json)
        //     })
        //     .catch((err) => {
        //         reject(err);
        //     });
        // COMMENTED FOR TESTING PURPOSES
        normalScan(url, proxy)
            .then((commandOutput) => {
                if (commandOutput !== 'success') {
                    reject(commandOutput);
                }
                toJson()
                    .then((json) => {
                        resolve(json)
                    })
                    .catch((err) => {
                        reject(err);
                    });
            })
            .catch((err) => {
                reject(err);
            });
    });
}

function nmapTool_joomlaBrute(url) {
    return new Promise((resolve, reject) => {
        io.emit('progress', 'Bruteforcing Joomla login page..');
        // toJson("outputs/nmapOutput_joomla.xml", "joomlaBrute")
        //     .then((json) => {
        //         getInfo(json, "joomlaBrute")
        //             .then((nmapInfo) => {
        //                 resolve(nmapInfo);
        //             })
        //             .catch((err) => {
        //                 reject(err);
        //             });
        //     })
        //     .catch((err) => {
        //         reject(err);
        //     });
        // COMMENTED FOR TESTING PURPOSES
        joomlaBrute(url)
            .then((commandOutput) => {
                if (commandOutput !== 'success') {
                    reject(commandOutput);
                }
                toJson("outputs/nmapOutput_joomla.xml")
                    .then((json) => {
                        getInfo(json, "joomlaBrute")
                            .then((nmapInfo) => {
                                resolve(nmapInfo);
                            })
                            .catch((err) => {
                                reject(err);
                            });
                    })
                    .catch((err) => {
                        reject(err);
                    });
            })
            .catch((err) => {
                reject(err);
            });
    });
}

function jsonEscape(str) {
    return str.replace(/\\n/g, "|").replace(/\\t/g, " ");
}

module.exports = {
    joomlaTool: async(url, type, proxy = "") => {
        return await joomlaTool(url, type, proxy);
    }
};
