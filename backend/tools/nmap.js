const command = require('../Utils/command');
const nmap2Json = require('../Utils/nmap2Json');
const config = require('../config/config');

const defaultScan = (url) => {
    return new Promise((resolve, reject) => {
        command.execCommand(config.NMAP + ' -oX outputs/nmapOutput.xml ' + url, 'nmap')
            .then((commandOutput) => {
                resolve(commandOutput);
            })
            .catch((err) => {
                reject(err);
            }); 
    });
};

const commonVulnScan = (url) => {
    return new Promise((resolve, reject) => {
        command.execCommand(config.NMAP + ' -oX outputs/nmapOutput.xml --script nmap-vulners -sV ' + url, 'nmap')
            .then((commandOutput) => {
                resolve(commandOutput);
            })
            .catch((err) => {
                reject(err);
            });
    });
}

const vulnScan = (url) => {
    return new Promise((resolve, reject) => {
        command.execCommand(config.NMAP + ' -oX outputs/nmapOutput.xml --script vuln ' + url, 'nmap')
            .then((commandOutput) => {
                resolve(commandOutput);
            })
            .catch((err) => {
                reject(err);
            });
    });
}

function toJson() {
    return new Promise((resolve, reject) => {
        nmap2Json.nmap2Json()
            .then((json) => {
                console.log('Finshed Convertion nmap.');
                resolve(json);
            })
            .catch((err) => {
                console.log(err);
                reject(err);
            });
    });
}

function getInfo(json) {
    return new Promise((resolve, reject) => {
        // get open ports 
        const ports = json.host.ports;
        const openPorts = [];
        const vulns = [];
        ports.forEach(element => {
            if (element.state.state === "open") {
                openPorts.push(element.port.portid);
                if (typeof (JSON.stringify(element.script)) !== 'undefined') {
                    const scriptString = jsonEscape(JSON.stringify(element.script));
                    const scriptObj = JSON.parse(scriptString);
                    vulns.push([element.port.portid, scriptObj.vulners]);
                    console.log(vulns);
                }
                // vulns[element["port"]["portid"]].push(element["script"]["vulners"]);
            }
        });



        console.log('Nmap scan found these ports as open: ' + openPorts);
        resolve({ 'openPorts': openPorts, 'vulnerabilities': vulns });
    });
}

function jsonEscape(str) {
    return str.replace(/\\n/g, "|").replace(/\\t/g, " ");
}

function nmapTool(url, type) {
    if (url.includes('/')) {
        url = url.split('/')[0];
    }
    return new Promise((resolve, reject) => {
        switch (type) {
            case "default":
                nmapTool_default(url)
                    .then(commandOutput => resolve(commandOutput))
                    .catch(err => reject(err));
                break;
            case "common":
                nmapTool_common(url)
                    .then(commandOutput => resolve(commandOutput))
                    .catch(err => reject(err));
                break;
            case "vuln":
                nmapTool_vuln(url)
                    .then(commandOutput => resolve(commandOutput))
                    .catch(err => reject(err));
                break;
        }
    });
}


function nmapTool_vuln(url) {
    return new Promise((resolve, reject) => {
        vulnScan(url)
            .then((commandOutput) => {
                if (commandOutput !== 'success') {
                    reject('failed');
                }
                toJson()
                    .then((json) => {
                        getInfo(json)
                            .then((nmapInfo) => {
                                resolve(nmapInfo);
                            })
                            .catch((err) => {
                                reject(err);
                            });
                    })
                    .catch((err) => {
                        console.log(err);
                    });
            })
            .catch((err) => {
                reject(err);
            });
    });
}


function nmapTool_common(url) {
    return new Promise((resolve, reject) => {
        commonVulnScan(url)
            .then((commandOutput) => {
                if (commandOutput !== 'success') {
                    reject('failed');
                }
                toJson()
                    .then((json) => {
                        getInfo(json)
                            .then((nmapInfo) => {
                                resolve(nmapInfo);
                            })
                            .catch((err) => {
                                reject(err);
                            });
                    })
                    .catch((err) => {
                        console.log(err);
                    });
            })
            .catch((err) => {
                reject(err);
            });
    });
}


function nmapTool_default(url) {
    return new Promise((resolve, reject) => {
        defaultScan(url)
            .then((commandOutput) => {
                if (commandOutput !== 'success') {
                    reject('failed');
                }
                toJson()
                    .then((json) => {
                        getInfo(json)
                            .then((nmapInfo) => {
                                resolve(nmapInfo);
                            })
                            .catch((err) => {
                                reject(err);
                            });
                    })
                    .catch((err) => {
                        console.log(err);
                    });
            })
            .catch((err) => {
                reject(err);
            });
    });
}


module.exports = {
    nmapTool: async (url, type) => {
        return await nmapTool(url, type);
    }
};