const command = require('../Utils/command');
const nmap2Json = require('../Utils/nmap2Json');
const config = require('../config/config');

const defaultScan = (url) => {
    return new Promise((resolve, reject) => {
        command.execCommand(config.NMAP + ' -oX outputs/nmapOutput_default.xml -sV ' + url, 'nmap')
            .then((commandOutput) => {
                resolve(commandOutput);
            })
            .catch((err) => {
                reject(err);
            });
    });
};

const commonVulnScan = (url) => {
    return new Promise((resolve, reject) => {
        command.execCommand(config.NMAP + ' -oX outputs/nmapOutput_common.xml --script nmap-vulners -sV ' + url, 'nmap')
            .then((commandOutput) => {
                resolve(commandOutput);
            })
            .catch((err) => {
                reject(err);
            });
    });
}

const vulnScan = (url) => {
    return new Promise((resolve, reject) => {
        command.execCommand(config.NMAP + ' -oX outputs/nmapOutput_vuln.xml --script vuln ' + url, 'nmap')
            .then((commandOutput) => {
                resolve(commandOutput);
            })
            .catch((err) => {
                reject(err);
            });
    });
}

const joomlaBrute = (url) => {
    return new Promise((resolve, reject) => {
        command.execCommand(config.NMAP + ' -oX outputs/nmapOutput_joomla.xml -sV --script http-joomla-brute ' + url, 'nmap')
            .then((commandOutput) => {
                resolve(commandOutput);
            })
            .catch((err) => {
                reject(err);
            });
    });
}

const heartbleedScan = (url) => {
    return new Promise((resolve, reject) => {
        command.execCommand(config.NMAP + ' -oX outputs/nmapOutput_heartbleed.xml -p 443 --script ssl-heartbleed ' + url, 'nmap')
            .then((commandOutput) => {
                resolve(commandOutput)
            })
            .catch((err) => {
                reject(err);
            });
    });
}

const poodleScan = (url) => {
    return new Promise((resolve, reject) => {
        command.execCommand(config.NMAP + ' -oX outputs/nmapOutput_poodle.xml -sV --version-light --script ssl-poodle -p 443 ' + url, 'nmap')
            .then((commandOutput) => {
                resolve(commandOutput)
            })
            .then((err) => {
                reject(err);
            });
    });
}

const drownScan = (url) => {
    return new Promise((resolve, reject) => {
        command.execCommand(config.NMAP + ' -oX outputs/nmapOutput_drown.xml --sV --script=sslv2-drown ' + url, 'nmap')
            .then((commandOutput) => {
                resolve(commandOutput)
            })
            .then((err) => {
                reject(err);
            });
    });
}

function toJson(file) {
    return new Promise((resolve, reject) => {
        nmap2Json.nmap2Json(file)
            .then((json) => {
                console.log('Finshed Convertion nmap.');
                resolve(json);
            })
            .catch((err) => {
                reject(err);
            });
    });
}

function getInfo(json, type) {
    return new Promise((resolve, reject) => {
        // get ports 
        const ports = json.host.ports;
        switch (type) {
            case "joomlaBrute":
                let userCreds = [];
                ports.forEach(element => {
                    if (element.script !== 'undefined') {
                        scriptString = jsonEscape(JSON.stringify(element.script));
                        scriptObj = JSON.parse(scriptString);
                        console.log(scriptObj);
                        scriptObj["http-joomla-brute"].split("|").forEach(cred => {
                            if (cred.includes("Valid")) {
                                console.log(cred);
                                userCreds.push(cred);
                            }
                        });
                    }
                });
                console.log('Joomla bruteforce scan found these users cred: ' + userCreds);
                resolve({ 'userCreds': userCreds });
                break;
            default:
                const openPorts = [];
                const vulns = {};
                ports.forEach(element => {
                    if (element.state.state === "open") {
                        openPorts.push(element.port.portid);
                        if (typeof(JSON.stringify(element.script)) !== 'undefined') {
                            const scriptString = jsonEscape(JSON.stringify(element.script));
                            const scriptObj = JSON.parse(scriptString);
                            vulns[element.port.portid] = parseVulns(scriptObj.vulners);
                        }
                    }
                });
                console.log('Nmap scan found these ports as open: ' + openPorts);
                resolve({ 'ports': ports, 'openPorts': openPorts, 'vulnerabilities': vulns });
                break;
        }
    });
}

function parseVulns(vulnString) {
    if (vulnString === undefined) {
        return;
    }
    arr = {};
    stringSplit = vulnString.split("|");
    service = stringSplit[1].trim();
    vulnsArr = [];
    for (var i = 2; i < stringSplit.length; i++) {
        row = stringSplit[i].trim().split(' ');
        vulnsArr.push({ 'cve': row[0], 'num': row[1], 'url': row[2] });
    }
    arr[service] = vulnsArr;
    return arr;
}

function jsonEscape(str) {
    return str.replace(/\\n/g, "|").replace(/\\t/g, " ");
}

function getAccounts(str) {
    str = str.replace("")
}

function nmapTool(url, type) {
    if (url.includes('/')) {
        url = url.split('/')[0];
    }
    return new Promise((resolve, reject) => {
        console.log('Type: ' + type);
        switch (type) {
            case "default":
                nmapTool_default(url)
                    .then(commandOutput => resolve(commandOutput))
                    .catch(err => reject(err));
                break;
            case "common":
                nmapTool_common(url)
                    .then(commandOutput => resolve(commandOutput))
                    .catch(err => reject(err));
                break;
            case "vuln":
                nmapTool_vuln(url)
                    .then(commandOutput => resolve(commandOutput))
                    .catch(err => reject(err));
                break;
            case "joomlaBrute":
                nmapTool_joomlaBrute(url)
                    .then(commandOutput => resolve(commandOutput))
                    .catch(err => reject(err));
                break;
            case "heartbleed":
                nmapTool_heartbleed(url)
                    .then(commandOutput => resolve(commandOutput))
                    .catch(err => reject(err));
            case "poodle":
                nmapTool_poodle(url)
                    .then(commandOutput => resolve(commandOutput))
                    .catch(err => reject(err));
            case "drown":
                nmapTool_drown(url)
                    .then(commandOutput => resolve(commandOutput))
                    .catch(err => reject(err));
        }
    });
}


function nmapTool_vuln(url) {
    return new Promise((resolve, reject) => {
        vulnScan(url)
            .then((commandOutput) => {
                if (commandOutput !== 'success') {
                    reject(commandOutput);
                }
                toJson("outputs/nmapOutput_vuln.xml")
                    .then((json) => {
                        getInfo(json, "vuln")
                            .then((nmapInfo) => {
                                resolve(nmapInfo);
                            })
                            .catch((err) => {
                                reject(err);
                            });
                    })
                    .catch((err) => {
                        reject(err);
                    });
            })
            .catch((err) => {
                reject(err);
            });
    });
}

function nmapTool_common(url) {
    return new Promise((resolve, reject) => {
        console.log('Reading JSON');
        io.emit('progress', 'Scanning for open ports and vulnerabilities..');
        toJson("outputs/nmapOutput_common.xml")
            .then((json) => {
                getInfo(json, "common")
                    .then((nmapInfo) => {
                        resolve(nmapInfo);
                    })
                    .catch((err) => {
                        reject(err);
                    });
            })
            .catch((err) => {
                reject(err);
            });
        // COMMENTING FOR TESTING PURPOSES
        // commonVulnScan(url)
        //     .then((commandOutput) => {
        //         if (commandOutput !== 'success') {
        //             reject(commandOutput);
        //         }
        //         toJson("outputs/nmapOutput_common.xml")
        //             .then((json) => {
        //                 getInfo(json, "common")
        //                     .then((nmapInfo) => {
        //                         resolve(nmapInfo);
        //                     })
        //                     .catch((err) => {
        //                         reject(err);
        //                     });
        //             })
        //             .catch((err) => {
        //                 reject(err);
        //             });
        //     })
        //     .catch((err) => {
        //         reject(err);
        //     });
    });
}

function nmapTool_default(url) {
    return new Promise((resolve, reject) => {
        console.log('Reading JSON');
        io.emit('progress', 'Scanning for open ports..');
        toJson("outputs/nmapOutput_default.xml")
            .then((json) => {
                getInfo(json, "default")
                    .then((nmapInfo) => {
                        resolve(nmapInfo);
                    })
                    .catch((err) => {
                        reject(err);
                    });
                // resolve(json);
            })
            .catch((err) => {
                reject(err);
            });
        // COMMENTED FOR TESTING PURPOSES
        // defaultScan(url)
        //     .then((commandOutput) => {
        //         if (commandOutput !== 'success') {
        //             reject(commandOutput);
        //         }
        //         toJson("outputs/nmapOutput_default.xml")
        //             .then((json) => {
        //                 getInfo(json, "default")
        //                     .then((nmapInfo) => {
        //                         resolve(nmapInfo);
        //                     })
        //                     .catch((err) => {
        //                         reject(err);
        //                     });
        //                 // resolve(json);
        //             })
        //             .catch((err) => {
        //                 reject(err);
        //             });
        //     })
        //     .catch((err) => {
        //         reject(err);
        //     });
    });
}

function nmapTool_joomlaBrute(url) {
    return new Promise((resolve, reject) => {
        io.emit('progress', 'Bruteforcing joomla login page..');
        toJson("outputs/nmapOutput_joomla.xml")
            .then((json) => {
                getInfo(json, "joomlaBrute")
                    .then((nmapInfo) => {
                        resolve(nmapInfo);
                    })
                    .catch((err) => {
                        reject(err);
                    });
            })
            .catch((err) => {
                reject(err);
            });
        // COMMENTED FOR TESTING PURPOSES
        // joomlaBrute(url)
        //     .then((commandOutput) => {
        //         if (commandOutput !== 'success') {
        //             reject(commandOutput);
        //         }
        //         toJson("outputs/nmapOutput_joomla.xml")
        //             .then((json) => {
        //                 getInfo(json, "joomlaBrute")
        //                     .then((nmapInfo) => {
        //                         resolve(nmapInfo);
        //                     })
        //                     .catch((err) => {
        //                         reject(err);
        //                     });
        //             })
        //             .catch((err) => {
        //                 reject(err);
        //             });
        //     })
        //     .catch((err) => {
        //         reject(err);
        //     });
    });
}

function nmapTool_heartbleed(url) {
    return new Promise((resolve, reject) => {
        heartbleedScan(url)
            .then((commandOutput) => {
                if (commandOutput !== 'success') {
                    reject(commandOutput);
                }
                toJson("outputs/nmapOutput_heartbleed.xml")
                    .then((json) => {
                        getInfo(json, "default")
                            .then((nmapInfo) => {
                                resolve(nmapInfo);
                            })
                            .catch((err) => {
                                reject(err);
                            });
                    })
                    .catch((err) => {
                        reject(err);
                    });
            })
            .catch((err) => {
                reject(err);
            });
    });
}

function nmapTool_poodle(url) {
    return new Promise((resolve, reject) => {
        poodleScan(url)
            .then((commandOutput) => {
                if (commandOutput !== 'success') {
                    reject(commandOutput);
                }
                toJson("outputs/nmapOutput_poodle.xml")
                    .then((json) => {
                        getInfo(json, "default")
                            .then((nmapInfo) => {
                                resolve(nmapInfo);
                            })
                            .catch((err) => {
                                reject(err);
                            });
                    })
                    .catch((err) => {
                        reject(err);
                    });
            })
            .catch((err) => {
                reject(err);
            });
    });
}

function nmapTool_drown(url) {
    return new Promise((resolve, reject) => {
        drownScan(url)
            .then((commandOutput) => {
                if (commandOutput !== 'success') {
                    reject(commandOutput);
                }
                toJson("outputs/nmapOutput_drown.xml")
                    .then((json) => {
                        getInfo(json, "default")
                            .then((nmapInfo) => {
                                resolve(nmapInfo);
                            })
                            .catch((err) => {
                                reject(err);
                            });
                    })
                    .catch((err) => {
                        reject(err);
                    });
            })
            .catch((err) => {
                reject(err);
            });
    });
}

module.exports = {
    nmapTool: async(url, type) => {
        return await nmapTool(url, type);
    }
};