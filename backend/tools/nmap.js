const command = require('../Utils/command');
const nmap2Json = require('../Utils/nmap2Json');
const config = require('../config/config');

const defaultScan = (url) => {
    return new Promise((resolve, reject) => {
        command.execCommand(config.NMAP + ' -oX outputs/nmapOutput.xml ' + url, 'nmap')
            .then((commandOutput) => {
                resolve(commandOutput);
            })
            .catch((err) => {
                reject(err);
            });
    });
};

function toJson() {
    return new Promise((resolve, reject) => {
        nmap2Json.nmap2Json()
            .then((json) => {
                console.log('Finshed Convertion nmap.');
                resolve(json);
            })
            .catch((err) => {
                console.log(err);
                reject(err);
            });
    });
}

function getInfo(json) {
    return new Promise((resolve, reject) => {
        // get open ports 
        const ports = json["host"]["ports"];
        const openPorts = [];
        ports.forEach(element => {
            if (element["state"]["state"] === "open") {
                openPorts.push(element["port"]["portid"]);
            }
        });
        console.log('Nmap scan found these ports as open: ' + openPorts);
        resolve({ 'openPorts': openPorts })
    });
}

function nmapTool(url) {
    return new Promise((resolve, reject) => {
        defaultScan(url)
            .then((commandOutput) => {
                if (commandOutput !== 'success') {
                    reject('failed');
                }
                toJson()
                    .then((json) => {
                        getInfo(json)
                            .then((nmapInfo) => {
                                resolve(nmapInfo);
                            })
                            .catch((err) => {
                                reject(err);
                            });
                    })
                    .catch((err) => {
                        console.log(err);
                    });
            })
            .catch((err) => {
                reject(err);
            });
    });
}


module.exports = {
    nmapTool: async (url) => {
        return await nmapTool(url);
    }
};