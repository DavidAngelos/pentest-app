const command = require('../Utils/command');
const fs = require('fs');
const config = require('../config/config');


const defaultScan = (url) => {
    return new Promise((resolve, reject) => {
        command.execCommand(config.WAPITI + ' -u ' + url + ' -f json -o outputs/wapitiOutput', 'wapiti')
            .then((commandOutput) => {
                resolve(commandOutput);
            })
            .catch((err) => {
                reject(err);
            });
    });
};

const sqliScan = (url) => {
    return new Promise((resolve, reject) => {
        command.execCommand(config.WAPITI + ' -u ' + url + ' -m ' + config.wapiti_sql + ' -f json -o outputs/wapitiOutput', 'sqli')
            .then((commandOutput) => {
                resolve(commandOutput);
            })
            .catch((err) => {
                reject(err);
            });
    });
};

const xssScan = (url) => {
    return new Promise((resolve, reject) => {
        command.execCommand(config.WAPITI + ' -u ' + url + ' -m ' + config.wapiti_xss + ' -f json -o outputs/wapitiOutput', 'xss')
            .then((commandOutput) => {
                resolve(commandOutput);
            })
            .catch((err) => {
                reject(err);
            });
    });
};

function toJson() {
    return new Promise((resolve, reject) => {
        let rawData = fs.readFileSync('outputs/wapitiOutput');
          let json = JSON.parse(rawData);
          console.log('Finshed Convertion wapiti.');     
          resolve(json);
    });
}

function getInfo(json) {
    return new Promise((resolve, reject) => {
        // TODO: parse JSON
    });
}

function wapitiTool_default(url) {
    return new Promise((resolve, reject) => {
        defaultScan(url)
            .then((commandOutput) => {
                if (commandOutput !== 'success') {
                    reject('failed');
                }
                toJson()
                    .then((json) => {
                        // whatwebTool.whatwebInfo(json)
                        //     .then((whatwebInfo) => resolve(whatwebInfo))
                        //     .catch((err) => err);
                        resolve(json)
                    })
                    .catch((err) => {
                        console.log(err);
                    });
            })
            .catch((err) => {
                reject(err);
            });
    });

}

function wapitiTool_sqli(url) {
    return new Promise((resolve, reject) => {
        sqliScan(url)
            .then((commandOutput) => {
                if (commandOutput !== 'success') {
                    reject('failed');
                }
                toJson()
                    .then((json) => {
                        // whatwebTool.whatwebInfo(json)
                        //     .then((whatwebInfo) => resolve(whatwebInfo))
                        //     .catch((err) => err);
                        resolve(json)
                    })
                    .catch((err) => {
                        console.log(err);
                    });
            })
            .catch((err) => {
                reject(err);
            });
    });

}

function wapitiTool_xss(url) {
    return new Promise((resolve, reject) => {
        xssScan(url)
            .then((commandOutput) => {
                if (commandOutput !== 'success') {
                    reject('failed');
                }
                toJson()
                    .then((json) => {
                        // whatwebTool.whatwebInfo(json)
                        //     .then((whatwebInfo) => resolve(whatwebInfo))
                        //     .catch((err) => err);
                        resolve(json)
                    })
                    .catch((err) => {
                        console.log(err);
                    });
            })
            .catch((err) => {
                reject(err);
            });
    });

}


module.exports = {
    wapitiTool_default: async (url) => {
        return await wapitiTool_default(url);
    },
    wapitiTool_sqli: async (url) => {
        return await wapitiTool_sqli(url);
    },
    wapitiTool_xss: async (url) => {
        return await wapitiTool_xss(url);
    }
};