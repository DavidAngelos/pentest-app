const command = require('../Utils/command');
const fs = require('fs');
const config = require('../config/config');


const defaultScan = (url, proxy) => {
    return new Promise((resolve, reject) => {
        let commandToExec = "";
        if (proxy != "") {
            commandToExec = config.WHATWEB + ' ' + url + ' --proxy ' + checkProxy(proxy) + ' --log-json=outputs/whatwebOutput';
        } else {
            commandToExec = config.WHATWEB + ' ' + url + ' --log-json=outputs/whatwebOutput';
        }
        command.execCommand(commandToExec, 'whatweb')
            .then((commandOutput) => {
                resolve(commandOutput);
            })
            .catch((err) => {
                reject(err);
            });
    });
}

function checkProxy(proxy) {
    if (proxy.startsWith('http')) {
        return proxy.replace('http://', '');
    } else {
        return proxy;
    }
}

function toJson() {
    return new Promise((resolve, reject) => {
        let rawData = fs.readFileSync('outputs/whatwebOutput');
        let json = JSON.parse(rawData);
        // command.execCommand('rm -f outputs/whatwebOutput', 'clean');
        console.log('Finshed Convertion whatweb.');
        resolve(json);
    });
}

function getInfo(json) {
    return new Promise((resolve, reject) => {
        let plugins = null;
        json.forEach(info => {
            if (info['plugins'] !== undefined) {
                if (info['plugins']['RedirectLocation'] === undefined) {
                    plugins = info['plugins'];
                }
            }
        });
        resolve(plugins);
    });
}

function whatwebTool(url, type, proxy) {
    return new Promise((resolve, reject) => {
        switch (type) {
            case "default":
                whatwebTool_default(url, proxy)
                    .then(commandOutput => resolve(commandOutput))
                    .catch(err => reject(err));
                break;
        }
    });
}

function whatwebTool_default(url, proxy) {
    return new Promise((resolve, reject) => {
        io.emit('progress', 'Identifying web technologies running..');
        // toJson()
        //     .then((json) => {
        //         getInfo(json)
        //             .then((whatwebInfo) => resolve(whatwebInfo))
        //             .catch((err) => err);
        //     })
        //     .catch((err) => {
        //         reject(err);
        //     });
        // COMMENTED FOR TESTING PURPOSES
        defaultScan(url, proxy)
            .then((commandOutput) => {
                if (commandOutput !== 'success') {
                    reject(commandOutput);
                }
                toJson()
                    .then((json) => {
                        getInfo(json)
                            .then((whatwebInfo) => resolve(whatwebInfo))
                            .catch((err) => err);
                    })
                    .catch((err) => {
                        reject(err);
                    });
            })
            .catch((err) => {
                reject(err);
            });
    });
}



module.exports = {
    whatwebTool: async(url, type, proxy = "") => {
        return await whatwebTool(url, type, proxy);
    }
};