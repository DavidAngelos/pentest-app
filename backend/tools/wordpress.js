const command = require('../Utils/command');
const fs = require('fs');
const config = require('../config/config');


const normalScan = (url) => {
    return new Promise((resolve, reject) => {
        command.execCommand(config.WPSCAN + ' --url ' + url + ' -f json -o outputs/wpscanOutput; echo "finished"', 'wpscan')
            .then((commandOutput) => {
                console.log(commandOutput)
                resolve(commandOutput);
            })
            .catch((err) => {
                reject(err);
            });
    });
};

const bruteforceScan = (url) => {
    return new Promise((resolve, reject) => {
        command.execCommand(config.WPSCAN + ' --url ' + url + ' -P /home/localhost/Downloads/passwords.txt -f json -o outputs/wpscanOutput; echo "finished"', 'wpscan')
            .then((commandOutput) => {
                resolve(commandOutput);
            })
            .catch((err) => {
                reject(err);
            });
    });
};

function toJson() {
    return new Promise((resolve, reject) => {
        let rawData = fs.readFileSync('outputs/wpscanOutput');
        let json = JSON.parse(rawData);
        console.log('Finshed Convertion wpscan.');
        resolve(json);
    });
}

function getInfo(json) {
    return new Promise((resolve, reject) => {
        // get info from json 
        // const ports = json["host"]["ports"];
        // const openPorts = [];
        // ports.forEach(element => {
        //     if (element["state"]["state"] === "open") {
        //         openPorts.push(element["port"]["portid"]);
        //     }
        // });
        // console.log('Nmap scan found these ports as open: ' + openPorts);
        // resolve({ 'openPorts': openPorts })
    });
}

function wordpressTool(url, type) {
    return new Promise((resolve, reject) => {
        switch (type) {
            case "default":
                wordpressTool_normal(url)
                    .then(commandOutput => resolve(commandOutput))
                    .catch(err => reject(err));
                break;
            case "bruteforce":
                wordpressTool_bruteforce(url)
                    .then(commandOutput => resolve(commandOutput))
                    .catch(err => reject(err));
                break;
        }
    });
}

function wordpressTool_normal(url) {
    return new Promise((resolve, reject) => {
        normalScan(url)
            .then((commandOutput) => {
                if (commandOutput !== 'success') {
                    reject('failed');
                }
                toJson()
                    .then((json) => {
                        // whatwebTool.whatwebInfo(json)
                        //     .then((whatwebInfo) => resolve(whatwebInfo))
                        //     .catch((err) => err);
                        resolve(json)
                    })
                    .catch((err) => {
                        reject(err);
                    });
            })
            .catch((err) => {
                reject(err);
            });
    });
}

function wordpressTool_bruteforce(url) {
    return new Promise((resolve, reject) => {
        bruteforceScan(url)
            .then((commandOutput) => {
                if (commandOutput !== 'success') {
                    reject('failed');
                }
                toJson()
                    .then((json) => {
                        // whatwebTool.whatwebInfo(json)
                        //     .then((whatwebInfo) => resolve(whatwebInfo))
                        //     .catch((err) => err);
                        resolve(json)
                    })
                    .catch((err) => {
                        reject(err);
                    });
            })
            .catch((err) => {
                reject(err);
            });
    });
}


module.exports = {
    wordpressTool: async (url, type) => {
        return await wordpressTool(url, type);
    }
};