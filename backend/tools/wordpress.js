const command = require('../Utils/command');
const fs = require('fs');
const config = require('../config/config');


const normalScan = (url, proxy) => {
    return new Promise((resolve, reject) => {
        let commandToExec = "";
        if (proxy != "") {
            commandToExec = config.WPSCAN + ' --url ' + url + ' --proxy ' + checkProxy(proxy) + ' --no-update -f json -o outputs/wpscanOutput_normal --api-token ' + config.wpscan_api + '; echo "finished"';
        } else {
            commandToExec = config.WPSCAN + ' --url ' + url + ' --no-update -f json -o outputs/wpscanOutput_normal --api-token ' + config.wpscan_api + '; echo "finished"';
        }
        command.execCommand(commandToExec, 'wpscan')
            .then((commandOutput) => {
                console.log(commandOutput)
                resolve(commandOutput);
            })
            .catch((err) => {
                reject(err);
            });
    });
};

const bruteforceScan = (url, proxy) => {
    return new Promise((resolve, reject) => {
        let commandToExec = "";
        if (proxy != "") {
            commandToExec = config.WPSCAN + ' --url ' + url + ' -P ' + config.wpscan_wordlist + ' --proxy ' + checkProxy(proxy) + ' --no-update -f json -o outputs/wpscanOutput_bruteforce; echo "finished"';
        } else {
            commandToExec = config.WPSCAN + ' --url ' + url + ' -P ' + config.wpscan_wordlist + ' --no-update -f json -o outputs/wpscanOutput_bruteforce; echo "finished"';
        }
        command.execCommand(commandToExec, 'wpscan')
            .then((commandOutput) => {
                resolve(commandOutput);
            })
            .catch((err) => {
                reject(err);
            });
    });
};

function checkProxy(proxy) {
    if (proxy.startsWith('http')) {
        return proxy;
    } else {
        return 'http://' + proxy;
    }
}

function toJson(file) {
    return new Promise((resolve, reject) => {
        let rawData = fs.readFileSync(file);
        let json = JSON.parse(rawData);
        console.log('Finshed Convertion wpscan.');
        resolve(json);
    });
}

function getInfo(json, type) {
    return new Promise((resolve, reject) => {
        // get info from json 

        switch (type) {
            case "default":
		if (json["scan_aborted"] !== undefined){
			resolve({'scan_aborted': true});
		} else {
		        const vulns = json["version"]["vulnerabilities"];
		        console.log('Wordpress scan found these vulnerabilities: ' + vulns);
		        resolve({ 'interesting_findings': json["interesting_findings"], 'version': json["version"]["number"], 'vulnerabilities': vulns, 'main_theme': json["main_theme"], 'plugins': json["plugins"] })
		}
                break;
            case "bruteforce":
		if (json["scan_aborted"] !== undefined){
			resolve({'scan_aborted': true});
		} else {
		        const users = json["users"];
		        console.log('Wordpress scan found these users: ' + users);
		        const pwds = json["password_attack"];
		        console.log('Wordpress scan found these passwords: ' + pwds);
		        resolve({ 'users': users, 'pwds': pwds });
		}
                break;
        }
        // const openPorts = [];
        // ports.forEach(element => {
        //     if (element["state"]["state"] === "open") {
        //         openPorts.push(element["port"]["portid"]);
        //     }
        // });
    });
}

function wordpressTool(url, type, proxy) {
    return new Promise((resolve, reject) => {
        switch (type) {
            case "default":
                wordpressTool_normal(url, proxy)
                    .then(commandOutput => resolve(commandOutput))
                    .catch(err => reject(err));
                break;
            case "bruteforce":
                wordpressTool_bruteforce(url, proxy)
                    .then(commandOutput => resolve(commandOutput))
                    .catch(err => reject(err));
                break;
        }
    });
}


function wordpressTool_normal(url, proxy) {
    return new Promise((resolve, reject) => {
        io.emit('progress', 'Detecting Wordpress CMS vulnerabilities and analysis..');
        // toJson('outputs/wpscanOutput_normal')
        //     .then((json) => {
        //         getInfo(json, 'default')
        //             .then((wpInfo) => resolve(wpInfo))
        //             .catch((err) => err);
        //     })
        //     .catch((err) => {
        //         reject(err);
        //     });
        // COMMENTED FOR TESTING PURPOSES
        normalScan(url, proxy)
            .then((commandOutput) => {
                if (commandOutput !== 'success') {
                    reject('failed');
                }
                toJson('outputs/wpscanOutput_normal')
                    .then((json) => {
                        getInfo(json, 'default')
                            .then((wpInfo) => resolve(wpInfo))
                            .catch((err) => err);
                    })
                    .catch((err) => {
                        reject(err);
                    });
            })
            .catch((err) => {
                reject(err);
            });
    });
}

function wordpressTool_bruteforce(url, proxy) {
    return new Promise((resolve, reject) => {
        io.emit('progress', 'Bruteforcing Wordpress login page..');
        // toJson('outputs/wpscanOutput_bruteforce')
        //     .then((json) => {
        //         getInfo(json, 'bruteforce')
        //             .then((wpInfo) => resolve(wpInfo))
        //             .catch((err) => err);
        //     })
        //     .catch((err) => {
        //         reject(err);
        //     });
        // COMMENTED FOR TESTING PURPOSES
        bruteforceScan(url, proxy)
            .then((commandOutput) => {
                if (commandOutput !== 'success') {
                    reject('failed');
                }
                toJson('outputs/wpscanOutput_bruteforce')
                    .then((json) => {
                        getInfo(json, 'bruteforce')
                            .then((wpInfo) => resolve(wpInfo))
                            .catch((err) => err);
                    })
                    .catch((err) => {
                        reject(err);
                    });
            })
            .catch((err) => {
                reject(err);
            });
    });
}


module.exports = {
    wordpressTool: async(url, type, proxy = "") => {
        return await wordpressTool(url, type, proxy);
    }
};
