import { Component, OnDestroy, OnInit } from '@angular/core';
import { NgForm } from '@angular/forms';

import { ScanService } from '../services/scan.service';
import { Subscription } from 'rxjs';
import { ActivatedRoute, ParamMap } from '@angular/router';

import { NgxSpinnerService } from "ngx-spinner";

@Component({
  selector: 'app-scan-create',
  templateUrl: './scan-create.component.html',
  styleUrls: ['./scan-create.component.css']
})
export class ScanCreateComponent implements OnInit, OnDestroy {

  output = '';
  outputObj: Object;
  private scanSub: Subscription;
  private mode = 'scan';
  private modeType = 'default';
  private scanning = false;
  private toolsSelected = [];
  private proxyEnabled = false;

  scan = {
    infoGathTools: [
      { name: 'Port scan', selected: false, id: "nmap_default" },
      { name: 'Port vulnerability scan', selected: false, id: "nmap_vuln" },
      { name: 'OSINT gathering', selected: false, id: "theharvester" },
      { name: 'Find subdomains', selected: false, id: "sublist3r" },
      { name: 'Bruteforce URIs', selected: false, id: "gobuster" },
    ], 
    webAppTools: [
      { name: 'Website scanner', selected: false, id: "whatweb" },
    ], 
    cmsTools: [
      { name: 'Wordpress scanner', selected: false, id: "wpscan_default" },
      { name: 'Joomla scanner', selected: false, id: "joomscan_default" },
      { name: 'Wordpress authentication bruteforce', selected: false, id: "wpscan_bruteforce" },
      { name: 'Joomla authentication bruteforce', selected: false, id: "nmap_joomla" },
    ], 
    infrastructureTools: [
      { name: 'SSL Heartbleed check', selected: false, id: "nmap_heartbleed" },
      { name: 'SSL Poodle check', selected: false, id: "nmap_poodle" },
      { name: 'SSL Drown check', selected: false, id: "nmap_drown" },
    ], 
    exploitTools: [
      { name: 'SQLi scanner', selected: false, id: "wapiti_sqli" },
      { name: 'XSS scanner', selected: false, id: "wapiti_xss" },
    ],
  }

  constructor(public scanService: ScanService, public route: ActivatedRoute, private spinner: NgxSpinnerService) {
  }

  ngOnInit(): void {
    this.route.paramMap.subscribe((paramMap: ParamMap) => {
      console.log(paramMap.get('scanType'));
      if (paramMap.has('scanType')) {
        this.mode = paramMap.get('scanType');
        this.output = '';
      } else {
        this.mode = 'scan';
        this.output = '';
      }
    });
    // this.scanService.getOutput();
    this.scanSub = this.scanService.getScanOutputUpdateListener()
      .subscribe((output: string) => {
        this.output = output;
        this.outputObj = JSON.parse(output);
        this.spinner.hide();
        this.scanning = false;
      });
  }

  onNewScan(scanForm: NgForm) {
    if (scanForm.invalid) {
      console.log('Invalid');
      return;
    }

    this.toolsSelected = [];
    let proxy = "";

    console.log(scanForm.value.proxy);

    for (let value in scanForm.value) {
      if (scanForm.value[value]) {
        this.toolsSelected.push(value);
      }
    }
    console.log(this.toolsSelected);
    if (this.toolsSelected.length > 1) {
      this.spinner.show();
      this.scanning = true;
      this.scanService.newScan(scanForm.value.enteredIp, "custom", this.modeType, this.toolsSelected, proxy);
    } else {
      this.spinner.show();
      this.scanning = true;
      this.scanService.newScan(scanForm.value.enteredIp, this.mode, this.modeType, this.toolsSelected, proxy);
    }


    // if (this.mode === 'nmap') { // should strip https://www. and http://www. before the domain and / at the end (eg. http://10.10.10.10/ -> 10.10.10.10)
    //   this.scanService.newScan(scanForm.value.enteredIp, this.mode, 'default');
    // } else if (this.mode === 'whois') { // should strip https://www.
    //   this.scanService.newScan(scanForm.value.enteredIp, this.mode , 'default');
    // } else if (this.mode === 'whatweb') {
    //   this.scanService.newScan(scanForm.value.enteredIp, this.mode, 'default');
    // } else if (this.mode === 'wapiti') {
    //   this.scanService.newScan(scanForm.value.enteredIp, this.mode, 'default');
    // } else if (this.mode === 'wpscan') {
    //   this.scanService.newScan(scanForm.value.enteredIp, this.mode, 'default');
    // } else if (this.mode === 'joomscan') {
    //   this.scanService.newScan(scanForm.value.enteredIp, this.mode, 'default');
    // } else if (this.mode === 'sqli') {
    //   this.scanService.newScan(scanForm.value.enteredIp, this.mode, 'default');
    // } else if (this.mode === 'xss') {
    //   this.scanService.newScan(scanForm.value.enteredIp, this.mode, 'default');
    // } else if (this.mode === 'auto') {
    //   this.scanService.newScan(scanForm.value.enteredIp, this.mode, 'default');
    // }
  }

  toggleProxy(e){
    this.proxyEnabled = e.target.checked;
  }

  ngOnDestroy(): void {
    this.scanSub.unsubscribe();
  }
}
